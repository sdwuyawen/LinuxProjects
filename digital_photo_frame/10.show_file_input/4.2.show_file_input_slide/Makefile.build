PHONY := __build
# 主目标
__build:

obj-y :=
subdir-y :=

include Makefile

# obj-y := a.o b.o c/ d/
# $(filter %/, $(obj-y))   : c/ d/
# __subdir-y  : c d
# subdir-y    : c d
# 找到obj-y中的dir/，并去掉/，得到dir
__subdir-y	:= $(patsubst %/,%,$(filter %/, $(obj-y)))
subdir-y	+= $(__subdir-y)

# c/built-in.o d/built-in.o
subdir_objs := $(foreach f,$(subdir-y),$(f)/built-in.o)

# a.o b.o
cur_objs := $(filter-out %/, $(obj-y))
# .a.o.d .b.o.d
dep_files := $(foreach f,$(cur_objs),.$(f).d)
# 保留dep_files中存在的文件
dep_files := $(wildcard $(dep_files))

# 如果dep_files不为空，则包含其中的文件到本文件
ifneq ($(dep_files),)
  include $(dep_files)
endif


PHONY += $(subdir-y)

# 主目标，依赖一级子目录和本目录下的built-in.o
__build : $(subdir-y) built-in.o

# 依赖的子目录，进入该子目录并用顶层目录下的Makefile.build作为Makefile进行make
# 递归的在子目录下生成built-in.o
$(subdir-y):
	make -C $@ -f $(TOPDIR)/Makefile.build

# 由本目录下的a.o和b.o，以及一级子目录下已经生成的built-in.o，生成本目录下的built-in.o
# ld -r : Generate relocatable output---i.e., generate an output file that can in turn serve as input to ld
built-in.o : $(cur_objs) $(subdir_objs)
	$(LD) -r -o $@ $^

# 要生成的依赖关系文件
dep_file = .$@.d

# $(cur_objs)的a.o b.o的生成方法
%.o : %.c
	$(CC) $(CFLAGS) -Wp,-MD,$(dep_file) -c -o $@ $<
	
.PHONY : $(PHONY)
